import * as path from "@modules/path";

import { render } from "preact";
import { useEffect, useRef } from "preact/hooks";

import { COPILOT_ICON_PATHNAME } from "@/constants";
import { File } from "@/typora-utils";
import { getTextCursorPosition } from "@/utils/dom";
import { css, registerCSS } from "@/utils/tools";

registerCSS(css`
  .completion-panel {
    position: absolute;
    z-index: 9999;
    pointer-events: none;
    white-space: pre-wrap;
    border: 1px solid #ccc;
    display: flex;
    flex-direction: column;
    padding: 0.5em;
    border-radius: 5px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
  }
`);

export interface CompletionPanelProps {
  x: number;
  y: number;
  text: string;
  textColor?: string;
}

export const attachCompletionPanel = (text: string) => {
  const pos = getTextCursorPosition();
  if (!pos) return () => {};

  const container = document.createElement("div");
  document.body.appendChild(container);

  const { x, y } = pos;
  render(<CompletionPanel x={x} y={y} text={text} />, container);

  const scrollListener = () => {
    const pos = getTextCursorPosition();
    if (!pos) return;
    $(".completion-panel").css("top", `calc(${pos.y}px + 1.5em)`);
  };
  $("content").on("scroll", scrollListener);

  return () => {
    $("content").off("scroll", scrollListener);
    render(null, container);
    container.remove();
  };
};

const CompletionPanel: FC<CompletionPanelProps> = ({ text, textColor = "gray", x, y }) => {
  const containerRef = useRef<HTMLDivElement>(null);
  const codeAreaRef = useRef<HTMLTextAreaElement>(null);

  const maxAvailableWidth =
    File.editor.writingArea.getBoundingClientRect().width -
    (x - File.editor.writingArea.getBoundingClientRect().left) -
    30;

  const copilotIconPosixPathname = path.posix.join(...COPILOT_ICON_PATHNAME.NORMAL.split(path.sep));

  // Calculate actual width after mount, and adjust position
  useEffect(() => {
    const actualWidth = containerRef.current!.getBoundingClientRect().width;
    containerRef.current!.style.left = `min(${x}px, calc(${x}px + ${maxAvailableWidth}px - ${actualWidth}px))`;

    // Initialize CodeMirror
    const cm = CodeMirror.fromTextArea(codeAreaRef.current!, {
      lineWrapping: true,
      mode: "gfm",
      theme: "typora-default",
      maxHighlightLength: Infinity,
      // @ts-expect-error - Extracted from Typora. I don't really know if this prop is used,
      // but to be safe, I just keep it like original
      styleActiveLine: true,
      visibleSpace: true,
      autoCloseTags: true,
      resetSelectionOnContextMenu: false,
      lineNumbers: false,
      dragDrop: false,
    });

    // Adjust cm styles
    const bodyBackgroundColor = window.getComputedStyle(document.body).backgroundColor;
    codeAreaRef.current!.style.backgroundColor = bodyBackgroundColor;
    cm.getWrapperElement().style.backgroundColor = bodyBackgroundColor;
    cm.getWrapperElement().style.padding = "0";
    $(cm.getWrapperElement()).find(".CodeMirror-hscrollbar").remove();
    $(cm.getWrapperElement()).children().css("backgroundColor", bodyBackgroundColor);
    $(cm.getWrapperElement()).find(".CodeMirror-activeline-background").remove();

    // Set visibility to visible
    containerRef.current!.style.removeProperty("visibility");
  }, []);

  return (
    <div
      ref={containerRef}
      className="completion-panel"
      style={{
        // Visibility is set to hidden on mount to adjust position after calculating actual width,
        // and then set to visible
        visibility: "hidden",
        left: 0,
        top: `calc(${y}px + 1.5em)`,
        maxWidth: `min(80ch, max(40ch, ${maxAvailableWidth}px))`,
        backgroundColor: window.getComputedStyle(document.body).backgroundColor,
        color: window.getComputedStyle(document.body).color,
      }}>
      <textarea ref={codeAreaRef} style={{ padding: 0 }} value={text} />
      <div
        style={{
          color: textColor,
          marginTop: "0.25em",
          marginLeft: "0.25em",
          display: "flex",
          flexDirection: "row",
          alignItems: "center",
        }}>
        <div
          style={{
            marginRight: "0.4em",
            height: "1em",
            width: "1em",
            backgroundColor: textColor,
            webkitMaskImage: `url('${copilotIconPosixPathname}')`,
            maskImage: `url('${copilotIconPosixPathname}')`,
            webkitMaskRepeat: "no-repeat",
            maskRepeat: "no-repeat",
            webkitMaskPosition: "center",
            maskPosition: "center",
            webkitMaskSize: "contain",
            maskSize: "contain",
          }}
        />
        <span style={{ marginRight: "0.25em" }}>Generated by GitHub Copilot</span>
      </div>
    </div>
  );
};

export default CompletionPanel;
